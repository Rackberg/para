#!/usr/bin/env php
<?php

use Para\Loader\ServicesLoader;
use Para\Loader\YmlFileLoaderFactory;
use Para\Pass\AddSubscriberPass;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\Console\DependencyInjection\AddConsoleCommandPass;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\Finder\Finder;

// Include composer autoloader.
if (file_exists(__DIR__ . '/../vendor/autoload.php')) {
    require_once __DIR__ . '/../vendor/autoload.php';
} elseif (file_exists(__DIR__ . '/../../../autoload.php')) {
    require_once __DIR__ . '/../../../autoload.php';
}

// Create the dependency injection container.
$container = new ContainerBuilder();
$container->addCompilerPass(new AddConsoleCommandPass());
$container->addCompilerPass(new AddSubscriberPass());

// Set the bin directory directory.
$container->setParameter('bin_dir', __DIR__);

$loader = new ServicesLoader(
    new YmlFileLoaderFactory($container, new FileLocator()),
    new Finder()
);
$loader->loadServices([
    __DIR__.'/../config/services',
    __DIR__.'/../src/Plugin/*/config',
]);

$container->compile();

// Create and run the application.
$application = $container->get('para.application');
$application->setCommandLoader($container->get('console.command_loader'));
$application->setContainer($container);
try {
    $application->run();
} catch (\Exception $e) {
    print 'An error occurred while trying to run para.' . "\n" . 'Reason: ' . $e->getMessage();
    exit(1);
}
